{"ast":null,"code":"var _jsxFileName = \"E:\\\\waterlily_Survey_Form\\\\frontend\\\\src\\\\pages\\\\Responses.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Responses() {\n  _s();\n  const [responses, setResponses] = useState([]);\n  const [grouped, setGrouped] = useState({});\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchResponses = async () => {\n      try {\n        const res = await api.get(\"/responses/me\");\n        setResponses(res.data);\n        const groupedByCategory = {};\n        res.data.forEach(resp => {\n          const cat = resp.question.category;\n          if (!groupedByCategory[cat]) groupedByCategory[cat] = [];\n          groupedByCategory[cat].push(resp);\n        });\n        setGrouped(groupedByCategory);\n      } catch (err) {\n        setError(\"Failed to load your responses.\");\n        console.error(err);\n      }\n    };\n    fetchResponses();\n  }, []);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-red-600\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Your Survey Responses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), Object.entries(grouped).map(([category, resps]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold capitalize mb-2\",\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"space-y-2\",\n        children: resps.map(resp => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"border p-3 rounded bg-gray-50\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium\",\n            children: resp.question.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700\",\n            children: resp.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this)]\n        }, resp.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, category, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Responses, \"CmOPTtYAIIFoJ9P3GwPG6NMoGME=\");\n_c = Responses;\nvar _c;\n$RefreshReg$(_c, \"Responses\");","map":{"version":3,"names":["useEffect","useState","api","jsxDEV","_jsxDEV","Responses","_s","responses","setResponses","grouped","setGrouped","error","setError","fetchResponses","res","get","data","groupedByCategory","forEach","resp","cat","question","category","push","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","resps","title","answer","id","_c","$RefreshReg$"],"sources":["E:/waterlily_Survey_Form/frontend/src/pages/Responses.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport api from \"../services/api\";\r\n\r\ntype Question = {\r\n  title: string;\r\n  category: string;\r\n};\r\n\r\ntype Response = {\r\n  id: number;\r\n  answer: string;\r\n  question: Question;\r\n};\r\nexport default function Responses() {\r\n  const [responses, setResponses] = useState<Response[]>([]);\r\n  const [grouped, setGrouped] = useState<Record<string, Response[]>>({});\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchResponses = async () => {\r\n      try {\r\n        const res = await api.get(\"/responses/me\");\r\n        setResponses(res.data);\r\n\r\n        const groupedByCategory: Record<string, Response[]> = {};\r\n\r\n        res.data.forEach((resp: Response) => {\r\n          const cat = resp.question.category;\r\n          if (!groupedByCategory[cat]) groupedByCategory[cat] = [];\r\n          groupedByCategory[cat].push(resp);\r\n        });\r\n\r\n        setGrouped(groupedByCategory);\r\n      } catch (err: any) {\r\n        setError(\"Failed to load your responses.\");\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    fetchResponses();\r\n  }, []);\r\n\r\n  if (error) return <div className=\"p-4 text-red-600\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Your Survey Responses</h1>\r\n\r\n      {Object.entries(grouped).map(([category, resps]) => (\r\n        <div key={category} className=\"mb-6\">\r\n          <h2 className=\"text-xl font-semibold capitalize mb-2\">{category}</h2>\r\n          <ul className=\"space-y-2\">\r\n            {resps.map((resp) => (\r\n              <li key={resp.id} className=\"border p-3 rounded bg-gray-50\">\r\n                <p className=\"font-medium\">{resp.question.title}</p>\r\n                <p className=\"text-gray-700\">{resp.answer}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}