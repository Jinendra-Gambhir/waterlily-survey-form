{"ast":null,"code":"var _jsxFileName = \"E:\\\\waterlily_Survey_Form\\\\frontend\\\\src\\\\pages\\\\Responses.tsx\",\n  _s = $RefreshSig$();\n/**\r\n * Responses.tsx\r\n * -----------------------\r\n * Why: Users need to see all survey questions and submit their answers in one form.\r\n * Purpose: Fetches survey questions grouped by category, collects answers, and sends them to the backend.\r\n */\n\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../services/api\";\nimport Navbar from \"../components/Navbar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Survey() {\n  _s();\n  const [questions, setQuestions] = useState(null);\n  const [answers, setAnswers] = useState({});\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  /**\r\n   * Why: Load all available survey questions when the page is visited.\r\n   * Purpose: Fetch grouped questions from the API and store them in local state.\r\n   */\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await api.get(\"/responses/\");\n        setQuestions(res.data);\n      } catch (err) {\n        console.error(err);\n        setError(\"Failed to load survey questions.\");\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  /**\r\n   * Why: Keep each question’s answer stored in state as the user types.\r\n   * Purpose: Update the `answers` state for a specific question ID.\r\n   */\n  const handleChange = (questionId, value) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  /**\r\n   * Why: Submit the user’s completed survey to the backend.\r\n   * Purpose: Build payload from answers and send to `/responses` API, then navigate to responses page.\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const payload = Object.entries(answers).map(([questionId, answer]) => ({\n      questionId: Number(questionId),\n      answer\n    }));\n    try {\n      await api.post(\"/responses\", {\n        responses: payload\n      });\n      navigate(\"/responses\");\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      setError((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"Failed to submit survey.\");\n    }\n  };\n\n  // Show loading until questions are fetched\n  if (!questions) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"Survey Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 10\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-600 mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-8\",\n        children: [Object.entries(questions).map(([category, categoryQuestions]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold capitalize mb-2\",\n            children: [category, \" Information\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: categoryQuestions.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block font-medium mb-1\",\n                children: q.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 22\n              }, this), q.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-500 mb-1\",\n                children: q.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 24\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: q.type,\n                className: \"w-full border border-gray-300 p-2 rounded\",\n                value: answers[q.id] || \"\",\n                onChange: e => handleChange(q.id, e.target.value),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 22\n              }, this)]\n            }, q.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 20\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 16\n          }, this)]\n        }, category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 14\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700\",\n          children: \"Submit Survey\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n_s(Survey, \"+huXuRaVBHObZwIYUZo+7lb1lBc=\", false, function () {\n  return [useNavigate];\n});\n_c = Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["useEffect","useState","useNavigate","api","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","Survey","_s","questions","setQuestions","answers","setAnswers","error","setError","navigate","fetchQuestions","res","get","data","err","console","handleChange","questionId","value","prev","handleSubmit","e","preventDefault","payload","Object","entries","map","answer","Number","post","responses","_err$response","_err$response$data","response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","category","categoryQuestions","q","title","description","type","id","onChange","target","required","_c","$RefreshReg$"],"sources":["E:/waterlily_Survey_Form/frontend/src/pages/Responses.tsx"],"sourcesContent":["/**\r\n * Responses.tsx\r\n * -----------------------\r\n * Why: Users need to see all survey questions and submit their answers in one form.\r\n * Purpose: Fetches survey questions grouped by category, collects answers, and sends them to the backend.\r\n */\r\n\r\n import { useEffect, useState } from \"react\";\r\n import { useNavigate } from \"react-router-dom\";\r\n import api from \"../services/api\";\r\n import Navbar from \"../components/Navbar\";\r\n \r\n type Question = {\r\n   id: number;\r\n   title: string;\r\n   description?: string;\r\n   type: \"text\" | \"number\";\r\n   category: \"demographic\" | \"health\" | \"financial\";\r\n };\r\n \r\n type GroupedQuestions = {\r\n   demographic: Question[];\r\n   health: Question[];\r\n   financial: Question[];\r\n };\r\n \r\n export default function Survey() {\r\n   const [questions, setQuestions] = useState<GroupedQuestions | null>(null);\r\n   const [answers, setAnswers] = useState<Record<number, string>>({});\r\n   const [error, setError] = useState(\"\");\r\n   const navigate = useNavigate();\r\n \r\n   /**\r\n    * Why: Load all available survey questions when the page is visited.\r\n    * Purpose: Fetch grouped questions from the API and store them in local state.\r\n    */\r\n   useEffect(() => {\r\n     const fetchQuestions = async () => {\r\n       try {\r\n         const res = await api.get(\"/responses/\");\r\n         setQuestions(res.data);\r\n       } catch (err) {\r\n         console.error(err);\r\n         setError(\"Failed to load survey questions.\");\r\n       }\r\n     };\r\n     fetchQuestions();\r\n   }, []);\r\n \r\n   /**\r\n    * Why: Keep each question’s answer stored in state as the user types.\r\n    * Purpose: Update the `answers` state for a specific question ID.\r\n    */\r\n   const handleChange = (questionId: number, value: string) => {\r\n     setAnswers((prev) => ({\r\n       ...prev,\r\n       [questionId]: value,\r\n     }));\r\n   };\r\n \r\n   /**\r\n    * Why: Submit the user’s completed survey to the backend.\r\n    * Purpose: Build payload from answers and send to `/responses` API, then navigate to responses page.\r\n    */\r\n   const handleSubmit = async (e: React.FormEvent) => {\r\n     e.preventDefault();\r\n \r\n     const payload = Object.entries(answers).map(([questionId, answer]) => ({\r\n       questionId: Number(questionId),\r\n       answer,\r\n     }));\r\n \r\n     try {\r\n       await api.post(\"/responses\", { responses: payload });\r\n       navigate(\"/responses\");\r\n     } catch (err: any) {\r\n       console.error(err);\r\n       setError(err?.response?.data?.error || \"Failed to submit survey.\");\r\n     }\r\n   };\r\n \r\n   // Show loading until questions are fetched\r\n   if (!questions) return <div className=\"p-4\">Loading questions...</div>;\r\n \r\n   return (\r\n     <>\r\n       <Navbar />\r\n \r\n       <div className=\"max-w-3xl mx-auto p-4\">\r\n         <h1 className=\"text-2xl font-bold mb-4\">Survey Form</h1>\r\n \r\n         {error && <div className=\"text-red-600 mb-4\">{error}</div>}\r\n \r\n         {/* Why: Render grouped questions by category.\r\n             Purpose: Iterate over each category and render its input fields. */}\r\n         <form onSubmit={handleSubmit} className=\"space-y-8\">\r\n           {Object.entries(questions).map(([category, categoryQuestions]) => (\r\n             <div key={category}>\r\n               <h2 className=\"text-xl font-semibold capitalize mb-2\">\r\n                 {category} Information\r\n               </h2>\r\n \r\n               <div className=\"space-y-4\">\r\n                 {categoryQuestions.map((q) => (\r\n                   <div key={q.id}>\r\n                     <label className=\"block font-medium mb-1\">{q.title}</label>\r\n                     {q.description && (\r\n                       <p className=\"text-sm text-gray-500 mb-1\">{q.description}</p>\r\n                     )}\r\n                     <input\r\n                       type={q.type}\r\n                       className=\"w-full border border-gray-300 p-2 rounded\"\r\n                       value={answers[q.id] || \"\"}\r\n                       onChange={(e) => handleChange(q.id, e.target.value)}\r\n                       required\r\n                     />\r\n                   </div>\r\n                 ))}\r\n               </div>\r\n             </div>\r\n           ))}\r\n \r\n           <button\r\n             type=\"submit\"\r\n             className=\"bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700\"\r\n           >\r\n             Submit Survey\r\n           </button>\r\n         </form>\r\n       </div>\r\n     </>\r\n   );\r\n }\r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}