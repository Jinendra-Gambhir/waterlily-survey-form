{"ast":null,"code":"var _jsxFileName = \"E:\\\\waterlily_Survey_Form\\\\frontend\\\\src\\\\pages\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../services/api\";\nimport Navbar from \"../components/Navbar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Survey() {\n  _s();\n  const [questions, setQuestions] = useState(null);\n  const [answers, setAnswers] = useState({});\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  // Fetch questions on load\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await api.get(\"/questions\");\n        console.log(\"ðŸš€ Received questions:\", res.data);\n        setQuestions(res.data);\n      } catch (err) {\n        console.error(err);\n        setError(\"Failed to load survey questions\");\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Handle input change\n  const handleChange = (questionId, value) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  // Submit responses\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const payload = Object.entries(answers).map(([questionId, answer]) => ({\n      questionId: Number(questionId),\n      answer\n    }));\n    try {\n      await api.post(\"/responses\", {\n        responses: payload\n      });\n      navigate(\"/responses\");\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      setError((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"Failed to submit survey\");\n    }\n  };\n  if (!questions) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"Survey Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-600 mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-8\",\n        children: [Object.entries(questions).map(([category, questions]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold capitalize mb-2\",\n            children: category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: questions.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block font-medium mb-1\",\n                children: q.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this), q.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-500 mb-1\",\n                children: q.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: q.type,\n                className: \"w-full border p-2 rounded\",\n                value: answers[q.id] || \"\",\n                onChange: e => handleChange(q.id, e.target.value),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 21\n              }, this)]\n            }, q.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700\",\n          children: \"Submit Survey\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Survey, \"+huXuRaVBHObZwIYUZo+7lb1lBc=\", false, function () {\n  return [useNavigate];\n});\n_c = Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["useEffect","useState","useNavigate","api","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","Survey","_s","questions","setQuestions","answers","setAnswers","error","setError","navigate","fetchQuestions","res","get","console","log","data","err","handleChange","questionId","value","prev","handleSubmit","e","preventDefault","payload","Object","entries","map","answer","Number","post","responses","_err$response","_err$response$data","response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","category","q","title","description","type","id","onChange","target","required","_c","$RefreshReg$"],"sources":["E:/waterlily_Survey_Form/frontend/src/pages/Survey.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../services/api\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\ntype Question = {\r\n  id: number;\r\n  title: string;\r\n  description?: string;\r\n  type: \"text\" | \"number\";\r\n  category: \"demographic\" | \"health\" | \"financial\";\r\n};\r\n\r\ntype GroupedQuestions = {\r\n  demographic: Question[];\r\n  health: Question[];\r\n  financial: Question[];\r\n};\r\n\r\nexport default function Survey() {\r\n  const [questions, setQuestions] = useState<GroupedQuestions | null>(null);\r\n  const [answers, setAnswers] = useState<Record<number, string>>({});\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  // Fetch questions on load\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const res = await api.get(\"/questions\");\r\n        console.log(\"ðŸš€ Received questions:\", res.data);\r\n        setQuestions(res.data);\r\n      } catch (err) {\r\n        console.error(err);\r\n        setError(\"Failed to load survey questions\");\r\n      }\r\n    };\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  // Handle input change\r\n  const handleChange = (questionId: number, value: string) => {\r\n    setAnswers((prev) => ({\r\n      ...prev,\r\n      [questionId]: value,\r\n    }));\r\n  };\r\n\r\n  // Submit responses\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const payload = Object.entries(answers).map(([questionId, answer]) => ({\r\n      questionId: Number(questionId),\r\n      answer,\r\n    }));\r\n\r\n    try {\r\n      await api.post(\"/responses\", { responses: payload });\r\n      navigate(\"/responses\");\r\n    } catch (err: any) {\r\n      console.error(err);\r\n      setError(err?.response?.data?.error || \"Failed to submit survey\");\r\n    }\r\n  };\r\n\r\n  if (!questions) return <div className=\"p-4\">Loading...</div>;\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n\r\n      <div className=\"max-w-3xl mx-auto p-4\">\r\n        <h1 className=\"text-2xl font-bold mb-4\">Survey Form</h1>\r\n\r\n        {error && <div className=\"text-red-600 mb-4\">{error}</div>}\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\r\n          {Object.entries(questions).map(([category, questions]) => (\r\n            <div key={category}>\r\n              <h2 className=\"text-xl font-semibold capitalize mb-2\">{category}</h2>\r\n              <div className=\"space-y-4\">\r\n                {questions.map((q) => (\r\n                  <div key={q.id}>\r\n                    <label className=\"block font-medium mb-1\">{q.title}</label>\r\n                    {q.description && (\r\n                      <p className=\"text-sm text-gray-500 mb-1\">{q.description}</p>\r\n                    )}\r\n                    <input\r\n                      type={q.type}\r\n                      className=\"w-full border p-2 rounded\"\r\n                      value={answers[q.id] || \"\"}\r\n                      onChange={(e) => handleChange(q.id, e.target.value)}\r\n                      required\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700\"\r\n          >\r\n            Submit Survey\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}