{"ast":null,"code":"var _jsxFileName = \"E:\\\\waterlily_Survey_Form\\\\frontend\\\\src\\\\pages\\\\Survey.tsx\",\n  _s = $RefreshSig$();\n/**\r\n * Survey.tsx\r\n * -----------------------\r\n * Why: The survey form is the core feature where users answer categorized questions.\r\n * Purpose: Fetches questions from the backend, organizes them into tabs, collects user responses,\r\n *          and submits them to the server in a structured format.\r\n */\n\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../services/api\";\nimport Navbar from \"../components/Navbar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Tab order for the survey sections\nconst tabs = [\"demographic\", \"health\", \"financial\"];\nexport default function Survey() {\n  _s();\n  const [questions, setQuestions] = useState(null);\n  const [answers, setAnswers] = useState({});\n  const [error, setError] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"demographic\");\n  const navigate = useNavigate();\n\n  /**\r\n   * Why: Load survey questions when the component mounts.\r\n   * Purpose: Fetch questions from the backend, deduplicate them by ID, and store them in state.\r\n   */\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await api.get(\"/questions\");\n        const raw = res.data;\n        const deduplicated = {\n          demographic: [],\n          health: [],\n          financial: []\n        };\n        const seenIds = new Set();\n        for (const category of tabs) {\n          for (const q of raw[category]) {\n            if (!seenIds.has(q.id)) {\n              deduplicated[category].push(q);\n              seenIds.add(q.id);\n            }\n          }\n        }\n        setQuestions(deduplicated);\n      } catch (err) {\n        console.error(err);\n        setError(\"Failed to load survey questions\");\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  /**\r\n   * Why: Keep form inputs controlled for each question.\r\n   * Purpose: Update the `answers` state whenever the user changes an input value.\r\n   */\n  const handleChange = (questionId, value) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  /**\r\n   * Why: Send the user's answers to the backend.\r\n   * Purpose: Build a payload from `answers` and submit via POST request to `/responses`.\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const payload = Object.entries(answers).map(([questionId, answer]) => ({\n      questionId: Number(questionId),\n      answer\n    }));\n    try {\n      await api.post(\"/responses\", {\n        responses: payload\n      });\n      navigate(\"/responses\");\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      setError((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"Failed to submit survey.\");\n    }\n  };\n\n  /**\r\n   * Why: Render appropriate input fields based on question type or content.\r\n   * Purpose: Display specialized inputs (gender radios, height dropdowns) or default text/number inputs.\r\n   */\n  const renderInput = q => {\n    const commonProps = {\n      className: \"w-full border p-2 rounded\",\n      value: answers[q.id] || \"\",\n      onChange: e => handleChange(q.id, e.target.value),\n      required: true\n    };\n\n    // Gender radio buttons\n    if (q.title.toLowerCase().includes(\"sex\")) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-6 mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${q.id}`,\n            value: \"Male\",\n            checked: answers[q.id] === \"Male\",\n            onChange: () => handleChange(q.id, \"Male\"),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 14\n          }, this), \"Male\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${q.id}`,\n            value: \"Female\",\n            checked: answers[q.id] === \"Female\",\n            onChange: () => handleChange(q.id, \"Female\"),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 14\n          }, this), \"Female\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 10\n      }, this);\n    }\n\n    // Height dropdowns\n    if (q.title.toLowerCase().includes(\"height\")) {\n      const feet = [\"4\", \"5\", \"6\", \"7\"];\n      const inches = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"border p-2 rounded w-32\",\n          onChange: e => {\n            var _answers$q$id;\n            return handleChange(q.id, `${e.target.value}'${((_answers$q$id = answers[q.id]) === null || _answers$q$id === void 0 ? void 0 : _answers$q$id.split(\"'\")[1]) || \"0\"}`);\n          },\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Feet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 14\n          }, this), feet.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: f,\n            children: [f, \" ft\"]\n          }, f, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 16\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"border p-2 rounded w-32\",\n          onChange: e => {\n            var _answers$q$id2;\n            return handleChange(q.id, `${((_answers$q$id2 = answers[q.id]) === null || _answers$q$id2 === void 0 ? void 0 : _answers$q$id2.split(\"'\")[0]) || \"5\"}'${e.target.value}`);\n          },\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Inches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 14\n          }, this), inches.map(i => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: i,\n            children: [i, \" in\"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 16\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 10\n      }, this);\n    }\n\n    // Default input field\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: q.type,\n      ...commonProps,\n      placeholder: q.title.includes(\"income\") ? \"e.g. 5000\" : q.title.includes(\"name\") ? \"Your full name\" : q.title.includes(\"zip\") ? \"e.g. 12345\" : q.title.includes(\"age\") ? \"e.g. 35\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 8\n    }, this);\n  };\n\n  // Loading state\n  if (!questions) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-6\",\n        children: \"Survey Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between mb-6\",\n        children: tabs.map(tab => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex-1 text-center border-b-2 pb-2 ${activeTab === tab ? \"border-blue-600 font-semibold text-blue-600\" : \"border-gray-300 text-gray-500\"}`,\n          children: tab.charAt(0).toUpperCase() + tab.slice(1)\n        }, tab, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 14\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-8\",\n        children: [questions[activeTab].map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block font-medium\",\n            children: [q.title, q.description && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-500 ml-2\",\n              children: [\"(\", q.description, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-red-500 ml-1\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 16\n          }, this), renderInput(q)]\n        }, q.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 14\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between pt-6\",\n          children: [activeTab !== \"demographic\" && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"bg-gray-300 hover:bg-gray-400 px-4 py-2 rounded\",\n            onClick: () => {\n              const currentIndex = tabs.indexOf(activeTab);\n              setActiveTab(tabs[currentIndex - 1]);\n            },\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 16\n          }, this), activeTab !== \"financial\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 ml-auto\",\n            onClick: () => {\n              const allFilled = questions[activeTab].every(q => {\n                var _answers$q$id3;\n                return (_answers$q$id3 = answers[q.id]) === null || _answers$q$id3 === void 0 ? void 0 : _answers$q$id3.trim();\n              });\n              if (!allFilled) {\n                alert(\"Please fill all fields in this section.\");\n                return;\n              }\n              const currentIndex = tabs.indexOf(activeTab);\n              setActiveTab(tabs[currentIndex + 1]);\n            },\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 16\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 ml-auto\",\n            children: \"Submit Survey\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n_s(Survey, \"I4CzlJGlIx8ntchn70Mt9n0mrI4=\", false, function () {\n  return [useNavigate];\n});\n_c = Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["useEffect","useState","useNavigate","api","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","tabs","Survey","_s","questions","setQuestions","answers","setAnswers","error","setError","activeTab","setActiveTab","navigate","fetchQuestions","res","get","raw","data","deduplicated","demographic","health","financial","seenIds","Set","category","q","has","id","push","add","err","console","handleChange","questionId","value","prev","handleSubmit","e","preventDefault","payload","Object","entries","map","answer","Number","post","responses","_err$response","_err$response$data","response","renderInput","commonProps","className","onChange","target","required","title","toLowerCase","includes","children","type","name","checked","fileName","_jsxFileName","lineNumber","columnNumber","feet","inches","_answers$q$id","split","f","_answers$q$id2","i","placeholder","tab","charAt","toUpperCase","slice","onSubmit","description","onClick","currentIndex","indexOf","allFilled","every","_answers$q$id3","trim","alert","_c","$RefreshReg$"],"sources":["E:/waterlily_Survey_Form/frontend/src/pages/Survey.tsx"],"sourcesContent":["/**\r\n * Survey.tsx\r\n * -----------------------\r\n * Why: The survey form is the core feature where users answer categorized questions.\r\n * Purpose: Fetches questions from the backend, organizes them into tabs, collects user responses,\r\n *          and submits them to the server in a structured format.\r\n */\r\n\r\n import { useEffect, useState } from \"react\";\r\n import { useNavigate } from \"react-router-dom\";\r\n import api from \"../services/api\";\r\n import Navbar from \"../components/Navbar\";\r\n \r\n type Question = {\r\n   id: number;\r\n   title: string;\r\n   description?: string;\r\n   type: \"text\" | \"number\";\r\n   category: \"demographic\" | \"health\" | \"financial\";\r\n };\r\n \r\n type GroupedQuestions = {\r\n   demographic: Question[];\r\n   health: Question[];\r\n   financial: Question[];\r\n };\r\n \r\n // Tab order for the survey sections\r\n const tabs: Array<keyof GroupedQuestions> = [\"demographic\", \"health\", \"financial\"];\r\n \r\n export default function Survey() {\r\n   const [questions, setQuestions] = useState<GroupedQuestions | null>(null);\r\n   const [answers, setAnswers] = useState<Record<number, string>>({});\r\n   const [error, setError] = useState(\"\");\r\n   const [activeTab, setActiveTab] = useState<keyof GroupedQuestions>(\"demographic\");\r\n   const navigate = useNavigate();\r\n \r\n   /**\r\n    * Why: Load survey questions when the component mounts.\r\n    * Purpose: Fetch questions from the backend, deduplicate them by ID, and store them in state.\r\n    */\r\n   useEffect(() => {\r\n     const fetchQuestions = async () => {\r\n       try {\r\n         const res = await api.get(\"/questions\");\r\n         const raw = res.data;\r\n \r\n         const deduplicated: GroupedQuestions = { demographic: [], health: [], financial: [] };\r\n         const seenIds = new Set();\r\n \r\n         for (const category of tabs) {\r\n           for (const q of raw[category]) {\r\n             if (!seenIds.has(q.id)) {\r\n               deduplicated[category].push(q);\r\n               seenIds.add(q.id);\r\n             }\r\n           }\r\n         }\r\n \r\n         setQuestions(deduplicated);\r\n       } catch (err) {\r\n         console.error(err);\r\n         setError(\"Failed to load survey questions\");\r\n       }\r\n     };\r\n     fetchQuestions();\r\n   }, []);\r\n \r\n   /**\r\n    * Why: Keep form inputs controlled for each question.\r\n    * Purpose: Update the `answers` state whenever the user changes an input value.\r\n    */\r\n   const handleChange = (questionId: number, value: string) => {\r\n     setAnswers((prev) => ({ ...prev, [questionId]: value }));\r\n   };\r\n \r\n   /**\r\n    * Why: Send the user's answers to the backend.\r\n    * Purpose: Build a payload from `answers` and submit via POST request to `/responses`.\r\n    */\r\n   const handleSubmit = async (e: React.FormEvent) => {\r\n     e.preventDefault();\r\n \r\n     const payload = Object.entries(answers).map(([questionId, answer]) => ({\r\n       questionId: Number(questionId),\r\n       answer,\r\n     }));\r\n \r\n     try {\r\n       await api.post(\"/responses\", { responses: payload });\r\n       navigate(\"/responses\");\r\n     } catch (err: any) {\r\n       console.error(err);\r\n       setError(err?.response?.data?.error || \"Failed to submit survey.\");\r\n     }\r\n   };\r\n \r\n   /**\r\n    * Why: Render appropriate input fields based on question type or content.\r\n    * Purpose: Display specialized inputs (gender radios, height dropdowns) or default text/number inputs.\r\n    */\r\n   const renderInput = (q: Question) => {\r\n     const commonProps = {\r\n       className: \"w-full border p-2 rounded\",\r\n       value: answers[q.id] || \"\",\r\n       onChange: (e: any) => handleChange(q.id, e.target.value),\r\n       required: true,\r\n     };\r\n \r\n     // Gender radio buttons\r\n     if (q.title.toLowerCase().includes(\"sex\")) {\r\n       return (\r\n         <div className=\"flex gap-6 mt-1\">\r\n           <label className=\"flex items-center gap-2\">\r\n             <input\r\n               type=\"radio\"\r\n               name={`question-${q.id}`}\r\n               value=\"Male\"\r\n               checked={answers[q.id] === \"Male\"}\r\n               onChange={() => handleChange(q.id, \"Male\")}\r\n               required\r\n             />\r\n             Male\r\n           </label>\r\n           <label className=\"flex items-center gap-2\">\r\n             <input\r\n               type=\"radio\"\r\n               name={`question-${q.id}`}\r\n               value=\"Female\"\r\n               checked={answers[q.id] === \"Female\"}\r\n               onChange={() => handleChange(q.id, \"Female\")}\r\n               required\r\n             />\r\n             Female\r\n           </label>\r\n         </div>\r\n       );\r\n     }\r\n \r\n     // Height dropdowns\r\n     if (q.title.toLowerCase().includes(\"height\")) {\r\n       const feet = [\"4\", \"5\", \"6\", \"7\"];\r\n       const inches = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"];\r\n       return (\r\n         <div className=\"flex gap-4\">\r\n           <select\r\n             className=\"border p-2 rounded w-32\"\r\n             onChange={(e) =>\r\n               handleChange(q.id, `${e.target.value}'${answers[q.id]?.split(\"'\")[1] || \"0\"}`)\r\n             }\r\n             required\r\n           >\r\n             <option value=\"\">Feet</option>\r\n             {feet.map((f) => (\r\n               <option key={f} value={f}>\r\n                 {f} ft\r\n               </option>\r\n             ))}\r\n           </select>\r\n           <select\r\n             className=\"border p-2 rounded w-32\"\r\n             onChange={(e) =>\r\n               handleChange(q.id, `${answers[q.id]?.split(\"'\")[0] || \"5\"}'${e.target.value}`)\r\n             }\r\n             required\r\n           >\r\n             <option value=\"\">Inches</option>\r\n             {inches.map((i) => (\r\n               <option key={i} value={i}>\r\n                 {i} in\r\n               </option>\r\n             ))}\r\n           </select>\r\n         </div>\r\n       );\r\n     }\r\n \r\n     // Default input field\r\n     return (\r\n       <input\r\n         type={q.type}\r\n         {...commonProps}\r\n         placeholder={\r\n           q.title.includes(\"income\") ? \"e.g. 5000\" :\r\n           q.title.includes(\"name\") ? \"Your full name\" :\r\n           q.title.includes(\"zip\") ? \"e.g. 12345\" :\r\n           q.title.includes(\"age\") ? \"e.g. 35\" : \"\"\r\n         }\r\n       />\r\n     );\r\n   };\r\n \r\n   // Loading state\r\n   if (!questions) return <div className=\"p-4\">Loading...</div>;\r\n \r\n   return (\r\n     <>\r\n       <Navbar />\r\n \r\n       <div className=\"max-w-3xl mx-auto p-4\">\r\n         <h1 className=\"text-3xl font-bold mb-6\">Survey Form</h1>\r\n \r\n         {/* Why: Show users which section they’re on.\r\n             Purpose: Render tab labels with visual indication of active tab. */}\r\n         <div className=\"flex justify-between mb-6\">\r\n           {tabs.map((tab) => (\r\n             <div\r\n               key={tab}\r\n               className={`flex-1 text-center border-b-2 pb-2 ${\r\n                 activeTab === tab ? \"border-blue-600 font-semibold text-blue-600\" : \"border-gray-300 text-gray-500\"\r\n               }`}\r\n             >\r\n               {tab.charAt(0).toUpperCase() + tab.slice(1)}\r\n             </div>\r\n           ))}\r\n         </div>\r\n \r\n         {/* Why: Render only current section’s questions for a step-by-step flow.\r\n             Purpose: Prevent users from being overwhelmed by all questions at once. */}\r\n         <form onSubmit={handleSubmit} className=\"space-y-8\">\r\n           {questions[activeTab].map((q) => (\r\n             <div key={q.id} className=\"space-y-1\">\r\n               <label className=\"block font-medium\">\r\n                 {q.title}\r\n                 {q.description && (\r\n                   <span className=\"text-sm text-gray-500 ml-2\">({q.description})</span>\r\n                 )}\r\n                 <span className=\"text-red-500 ml-1\">*</span>\r\n               </label>\r\n               {renderInput(q)}\r\n             </div>\r\n           ))}\r\n \r\n           {/* Why: Let users navigate between tabs or submit final answers.\r\n               Purpose: Show Previous/Next buttons or Submit button depending on the active section. */}\r\n           <div className=\"flex justify-between pt-6\">\r\n             {activeTab !== \"demographic\" && (\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"bg-gray-300 hover:bg-gray-400 px-4 py-2 rounded\"\r\n                 onClick={() => {\r\n                   const currentIndex = tabs.indexOf(activeTab);\r\n                   setActiveTab(tabs[currentIndex - 1]);\r\n                 }}\r\n               >\r\n                 Previous\r\n               </button>\r\n             )}\r\n \r\n             {activeTab !== \"financial\" ? (\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 ml-auto\"\r\n                 onClick={() => {\r\n                   const allFilled = questions[activeTab].every((q) => answers[q.id]?.trim());\r\n                   if (!allFilled) {\r\n                     alert(\"Please fill all fields in this section.\");\r\n                     return;\r\n                   }\r\n                   const currentIndex = tabs.indexOf(activeTab);\r\n                   setActiveTab(tabs[currentIndex + 1]);\r\n                 }}\r\n               >\r\n                 Next\r\n               </button>\r\n             ) : (\r\n               <button\r\n                 type=\"submit\"\r\n                 className=\"bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 ml-auto\"\r\n               >\r\n                 Submit Survey\r\n               </button>\r\n             )}\r\n           </div>\r\n         </form>\r\n       </div>\r\n     </>\r\n   );\r\n }\r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}